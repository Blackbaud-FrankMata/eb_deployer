{"name":"Eb deployer","tagline":"AWS Elastic Beanstalk blue-green deployment automation","body":"# EbDeployer\r\n\r\nLow friction deployments should be a breeze. Elastic Beanstalk provides a great foundation for performing Blue-Green deployments, and EbDeployer add a missing link to automate the whole flow out of box.\r\n\r\nEbDeployer thus allows you to do continuous delivery on AWS.\r\n\r\n## Installation\r\n\r\n    $ gem install eb_deployer\r\n\r\n## Usage\r\n\r\n### Step One: AWS Account Setup\r\n\r\nCreate an AWS IAM user for deploy and give it privilege to operate Elastic Beanstalk. Download the access keys for executing the deployment tasks later. Ensure your command line is primed with appropriate access_keys using one of techniques mentioned on [aws blog](http://ruby.awsblog.com/blog/tag/config).\r\n\r\n### Step Two: Packaging\r\n\r\nYou need to package your application for Elastic Beanstalk stack first. For Java app a warball is appropriate. For Ruby on Rails app a tar.gz file is good. You can also package a Rails/Sinatra app as a war ball using warbler and deploy to Java stack. (Please remember to run rake assets:precompile first for a rails app.)\r\n\r\n\r\n### Step Three: Generate configuration and Configure deployment process\r\n\r\n    $ eb_deploy\r\n\r\nThis will generate a default configuration at location 'config/eb_deployer.yml'. It is almost empty but working one. And it will generate settings for two environments 'development' and 'production'. Some options can be tweaked. The yml files includes documentation on how you can best suit it to your purpose.\r\n\r\n\r\n### Step Four: Fasten your seat belt\r\nrun deploy\r\n\r\n    $ eb_deploy -p <package built> -e <environment>\r\n\r\nThen open aws console for Elastic Beanstalk to see the result of this deployment.\r\n\r\n\r\n### Smoke Testing your stack\r\n\r\nEB_Deployer allows you to automate your deployment and then some. You can also add smoke tests to your deployment - thus ensuring that the app you deployed is also working correctly.\r\nAdding a smoke test suite is also simple. Check \"smoke_test\" section in your eb_deployer.yml. We show a simple curl based smoke test that helps you test if your app is up and responding to http. \r\n\r\n    smoke_test: >\r\n      curl_http_code = \"curl -s -o /dev/null -w \\\"%{http_code}\\\" http://#{host_name}\"\r\n      Timeout.timeout(600) do\r\n        while `#{curl_http_code}`.strip != '200'\r\n          sleep 5\r\n        end\r\n      end\r\n\r\n\r\nAny rakeable test suite can be run as part of the smoke test(selenium, cucumber, capybara, and so on.)\r\nYou can add more smoke tests by calling arbitrary rake tasks (Please make sure check return status):\r\n   \r\n    smoke_test: >\r\n      `rake test:smoke HOST_NAME=#{host_name}`\r\n      raise(\"Smoke failed!\") unless $?.success?\r\n\r\nSmoke testing gets you one step closer to continuous delivery.\r\n\r\n### Blue-Green deployment\r\nSince every deployment now runs smoke test, you now have a better safety net around your deployments. This allows us to trigger automatic blue-green deployments.\r\n\r\nTo do this you need not do anything special. So far we have deployed the application only once. Let's call this the 'green' stack. Any subsequent calls to deployment will deployment a copy of this application to a new stack - the 'blue' stack. Smoke tests will be run on it and once everything passes the 'blue'(new) stack will be switched to the 'green' stack. Thus your new code will now be on the active stack and the user will experience no downtime.\r\n\r\nOnce this new stack is stable or has run for a while you can choose to delete the old stack. Or if you are doing continuous delivery you may be ready to another 'blue' deployment. You could just trigger another deployment and repeat this every hour/day/week... you get the idea.\r\n\r\n\r\n\r\n### Destroying a stack\r\nSo you are done with this application or environment, you can destroy it easily as well.\r\n   \r\n    $ eb_deployer -d -e <environment>\r\n\r\nand you are done!\r\n\r\nLater tutorials coming soon will cover\r\n* how to setup multiple environment suites: production, staging, and how to manage configurations for them\r\n* how to setup RDS or other AWS resource and share them between blue green environments\r\n\r\nTake a look at code if you can not wait for the documentation.\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}